{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<pre><code>/$$                   /$$     /$$ /$$ /$$           /$$                              \n| $$                  | $$    |__/| $$|__/          |__/                              \n| $$   /$$ /$$   /$$ /$$$$$$   /$$| $$ /$$  /$$$$$$$ /$$  /$$$$$$  /$$   /$$  /$$$$$$$\n| $$  /$$/| $$  | $$|_  $$_/  | $$| $$| $$ /$$_____/| $$ /$$__  $$| $$  | $$ /$$_____/\n| $$$$$$/ | $$  | $$  | $$    | $$| $$| $$| $$      | $$| $$  \\ $$| $$  | $$|  $$$$$$ \n| $$_  $$ | $$  | $$  | $$ /$$| $$| $$| $$| $$      | $$| $$  | $$| $$  | $$ \\____  $$\n| $$ \\  $$|  $$$$$$/  |  $$$$/| $$| $$| $$|  $$$$$$$| $$|  $$$$$$/|  $$$$$$/ /$$$$$$$/\n|__/  \\__/ \\______/    \\___/  |__/|__/|__/ \\_______/|__/ \\______/  \\______/ |_______/\n</code></pre> <p>Lightweight library with a set of small Kotlin and Android extensions for a better development experience.</p>"},{"location":"#setup","title":"Setup","text":"<pre><code>// build.gradle\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'dev.vladleesi.kutilicious:base:1.0.3'\n    implementation 'dev.vladleesi.kutilicious:android-preferences:1.0.3'\n    implementation 'dev.vladleesi.kutilicious:android-view:1.0.3'\n    implementation 'dev.vladleesi.kutilicious:android-text:1.0.3'\n    implementation 'dev.vladleesi.kutilicious:android-color:1.0.3'\n}\n</code></pre>"},{"location":"#base","title":"Base","text":""},{"location":"#base-extensions","title":"Base Extensions","text":"<ul> <li><code>tag()</code>: Returns the tag (simple name) of the class.</li> <li><code>castOrNull()</code>: Returns the casted object of type [T] if the cast is successful, or <code>null</code> otherwise.</li> </ul>"},{"location":"#boolean-extensions","title":"Boolean Extensions","text":"<ul> <li><code>ifTrue(block: Boolean.() -&gt; Unit)</code>: Executes the specified block of code if the Boolean value is true.</li> <li><code>ifFalse(block: Boolean?.() -&gt; Unit)</code>: Executes the specified block of code if the Boolean value is false.</li> <li><code>nullOrFalse()</code>: Checks if the Boolean value is null or false.</li> <li><code>orFalse()</code>: Wraps a nullable type and returns the Boolean value if it is not null, or false if it is null.</li> </ul>"},{"location":"#integer-extensions","title":"Integer Extensions","text":"<ul> <li><code>orZero()</code>: Wraps a nullable type and returns the integer value if it is not null, or zero if it is null.</li> <li><code>takePositiveOrNull()</code>: Returns the positive integer value if it is greater than zero, or null if it is not.</li> <li><code>isZero()</code>: Checks if the integer value is zero.</li> <li><code>isNotZero()</code>: Checks if the integer value is not zero.</li> <li><code>divideToPercent(divideTo: Int)</code>: Divides the integer value by the specified divisor and returns the result as a percentage. Returns 0 if the divisor is 0.</li> </ul>"},{"location":"#float-extensions","title":"Float Extensions","text":"<ul> <li><code>orZero()</code>: Wraps a nullable type and returns the float value if it is not null, or zero if it is null.</li> <li><code>isZero()</code>: Checks if the float value is zero.</li> <li><code>isNotZero()</code>: Checks if the float value is not zero.</li> </ul>"},{"location":"#double-extensions","title":"Double Extensions","text":"<ul> <li><code>orZero()</code>: Wraps a nullable type and returns the double value if it is not null, or zero if it is null.</li> <li><code>isZero()</code>: Checks if the double value is zero.</li> <li><code>isNotZero()</code>: Checks if the double value is not zero.</li> </ul>"},{"location":"#bigdecimal-extensions","title":"BigDecimal Extensions","text":"<ul> <li><code>orZero()</code>: Wraps a nullable type and returns the BigDecimal value if it is not null, or BigDecimal.ZERO if it is null.</li> <li><code>isZero()</code>: Checks if the BigDecimal value is zero.</li> <li><code>isNotZero()</code>: Checks if the BigDecimal value is not zero.</li> <li><code>same(value: BigDecimal?)</code>: Checks if two BigDecimal values are equal.</li> </ul>"},{"location":"#string-extensions","title":"String Extensions","text":"<ul> <li><code>firstLetterUpperCase()</code>: Converts the first letter of the string to uppercase.</li> <li><code>addMissingPrefix(prefix: String, ignoreCase: Boolean = false)</code>: Adds a prefix to the string if it doesn't already start with it.</li> <li><code>isNotNullOrEmpty()</code>: Checks if the string is not null and not empty and returns a non-null boolean.</li> </ul>"},{"location":"#string-as-url","title":"String as URL","text":"<ul> <li><code>isUrl()</code>: Checks if the string is a valid URL.</li> <li><code>isUrlWithCustomScheme()</code>: Checks if the string is a URL with a custom scheme.</li> <li><code>getQueryMap()</code>: Extracts the query parameters from the string URL and returns them as a map.</li> <li><code>removeQueries(vararg queryKeys: String)</code>: Removes the specified query parameters from the string URL and returns the updated URL.</li> </ul>"},{"location":"#date-extensions","title":"Date Extensions","text":"<ul> <li><code>now: Date</code>: Returns the current date and time.</li> <li><code>nowTime: Long</code>: Returns the current time in milliseconds since January 1, 1970, 00:00:00 GMT.</li> <li><code>Long.toDate(): Date</code>: Converts a long value representing the time in milliseconds to a Date object.</li> <li><code>String.toDate(pattern: String, locale: Locale = Locale.getDefault()): Date?</code>: Converts a String representation of a date to a Date object using the specified pattern and locale.</li> <li><code>String.toDate(simpleDateFormat: SimpleDateFormat): Date?</code>: Converts a String representation of a date to a Date object using the specified SimpleDateFormat instance.</li> <li><code>Date.toString(pattern: String, locale: Locale = Locale.getDefault()): String?</code>: Converts the Date object to a string representation using the specified pattern and locale.</li> <li><code>Date.toString(simpleDateFormat: SimpleDateFormat): String?</code>: Converts the Date object to a string representation using the specified SimpleDateFormat instance.</li> </ul>"},{"location":"#android-preferences","title":"Android Preferences","text":"<p><code>editSync</code></p> <p>Synchronously edits SharedPreferences. Changes made using this function are immediately committed using <code>commit()</code>.</p> <pre><code>sharedPreferences.editSync {\n    putString(\"key\", \"value\")\n    putInt(\"count\", 5)\n}\n</code></pre> <p><code>editAsync</code></p> <p>Asynchronously edits SharedPreferences. Changes made using this function are applied using <code>apply()</code>.</p> <pre><code>sharedPreferences.editAsync {\n    putBoolean(\"isFirstLaunch\", false)\n}\n</code></pre> <p><code>get</code></p> <p>Retrieves a value from SharedPreferences based on a given key and returns it. If the value is not found or is null, it returns a default value.</p> <pre><code>// Assuming you have an instance of SharedPreferences called \"sharedPrefs\"\nval sharedPreferences = context.getSharedPreferences(\"mySharedPreferences\", Context.MODE_PRIVATE)\n// Retrieve a boolean value with the key \"isDarkModeEnabled\", providing a default value of false\nval isDarkModeEnabled = sharedPreferences.get(\"isDarkModeEnabled\", false)\n</code></pre> <p><code>putSync</code></p> <p>Stores a value in SharedPreferences synchronously using a specified key. It returns <code>true</code> if the value is successfully stored, and <code>false</code> otherwise.</p> <pre><code>// Assuming you have an instance of SharedPreferences called \"sharedPrefs\"\nval sharedPreferences = context.getSharedPreferences(\"mySharedPreferences\", Context.MODE_PRIVATE)\n// Store a boolean value with the key \"isDarkModeEnabled\"\nsharedPreferences.putSync(\"isDarkModeEnabled\", true)\n</code></pre> <p><code>putAsync</code></p> <p>Stores a value in SharedPreferences asynchronously with a specified key. It performs the storage operation in the background and does not return a value.</p> <pre><code>// Assuming you have an instance of SharedPreferences called \"sharedPrefs\"\nval sharedPreferences = context.getSharedPreferences(\"mySharedPreferences\", Context.MODE_PRIVATE)\n// Store a boolean value with the key \"isDarkModeEnabled\" asynchronously\nsharedPreferences.putAsync(\"isDarkModeEnabled\", true)\n</code></pre>"},{"location":"#android-view","title":"Android View","text":"<ul> <li><code>visible()</code>: Sets the visibility of a View to VISIBLE.</li> <li><code>gone()</code>: Sets the visibility of a View to GONE.</li> <li><code>invisible()</code>: Sets the visibility of a View to INVISIBLE.</li> <li><code>addRipple()</code>: Adds a ripple effect to the background of a View using the theme's selectableItemBackground attribute.</li> <li><code>addCircleRipple()</code>: Adds a circular ripple effect to the background of a View using the theme's selectableItemBackgroundBorderless attribute (available for API level 21 and higher).</li> <li><code>onFocus(block: (hasFocus: Boolean) -&gt; Unit)</code>: Sets a callback function to be invoked when the focus state of a View changes.</li> <li><code>forEachView</code>: Kotlin extension function recursively iterates through each view in the hierarchy, applying a specified action (lambda expression) to each view, including all child views if the current view is a ViewGroup.</li> </ul>"},{"location":"#android-text","title":"Android Text","text":"<ul> <li><code>getHighlightColor</code>: Retrieves the hexadecimal representation of a highlight color specified by a color resource ID.</li> <li><code>fromHTML</code>: Converts a string to a CharSequence with HTML formatting.</li> <li><code>bold</code>: Formats a CharSequence to be displayed in bold using HTML tags.</li> <li><code>withAsterisk</code>: Formats a CharSequence with an asterisk and applies a highlight color to the asterisk using HTML tags.</li> <li><code>applyColorSpanToSubstrings</code>: Applies a foreground color span to specified substrings within a CharSequence.</li> <li><code>applyBoldSpanToSubstrings</code>: Applies a bold style span to specified substrings within a CharSequence.</li> </ul>"},{"location":"#android-color","title":"Android Color","text":"<ul> <li><code>lightenColor</code>: Lightens an RGB color by a given percentage. It takes an integer color value and a percentage value between 0.0 and 1.0 as inputs. The function returns the lightened color as an integer value representing ARGB components.</li> <li><code>darkenColor</code>: Darkens an RGB color by a given percentage. See <code>lightenColor</code>.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License.</p>"}]}